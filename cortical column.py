# -*- coding: utf-8 -*-
"""ингибирующий

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WUYteoTupSmbrXQR10STcRG3TGqbgXCf
"""

!pip install neuron

from neuron import h, gui
import random

h.load_file('stdrun.hoc')

# Параметры сети
N_thalamus_E = 5
N_thalamus_I = 1
N_L4_E = 24
N_L4_I = 6
N_L23_E = 24
N_L23_I = 6
N_L5_E = 20
N_L5_I = 5
N_L6_E = 16
N_L6_I = 4

h.tstop = 200.0


class HHNeuron:
    def __init__(self, inh=False):
        self.soma = h.Section(name='soma')
        self.soma.L = 20
        self.soma.diam = 20
        self.soma.insert('hh')

        self.inh = inh

        # Запись мембранного потенциала
        self.vvec = h.Vector()
        self.vvec.record(self.soma(0.5)._ref_v)

        self.tvec = h.Vector()
        self.tvec.record(h._ref_t)


# Автоматически расплющиваем вложенные списки
def split_population(population, n_subgroups):
    size = len(population)
    step = size // n_subgroups
    return [population[i*step:(i+1)*step] for i in range(n_subgroups)]

def flatten(population):
    if isinstance(population[0], list):
        return [neuron for subgroup in population for neuron in subgroup]
    return population


'''
def connect_exc(source_neurons, target_neurons, e=0, tau=2.0, threshold=0, weight=0.001, delay=3.0):

    source_neurons = flatten(source_neurons)
    target_neurons = flatten(target_neurons)
    netcons = []
    synapses = []

    for src in source_neurons:
        for tgt in target_neurons:
            syn = h.ExpSyn(tgt.soma(0.5))
            syn.e = e
            syn.tau = tau

            nc = h.NetCon(src.soma(0.5)._ref_v, syn, sec=src.soma)
            nc.threshold = threshold
            nc.weight[0] = weight
            nc.delay = delay

            synapses.append(syn)
            netcons.append(nc)

    return synapses, netcons
'''
import random

def connect_exc(
    source_neurons,
    target_neurons,
    e=0,
    tau=2.0,
    threshold=0,
    weight_mean=0.001,
    weight_std=0.002,
    delay_mean=3.0,
    delay_std=2
):
    source_neurons = flatten(source_neurons)
    target_neurons = flatten(target_neurons)
    netcons = []
    synapses = []

    for src in source_neurons:
        for tgt in target_neurons:
            syn = h.ExpSyn(tgt.soma(0.5))
            syn.e = e
            syn.tau = tau

            nc = h.NetCon(src.soma(0.5)._ref_v, syn, sec=src.soma)
            nc.threshold = threshold

            # Генерация веса и задержки из нормального распределения
            w = max(0.0, random.gauss(weight_mean, weight_std))
            d = max(0.1, random.gauss(delay_mean, delay_std))  # минимальная задержка 0.1 мс

            nc.weight[0] = w
            nc.delay = d

            synapses.append(syn)
            netcons.append(nc)

    return synapses, netcons

def connect_exc_gauss(
    source_neurons,
    target_neurons,
    e=0,
    tau=2.0,
    threshold=0,
    weight_mean=0.001,
    weight_std=0.0009,
    delay_mean=3.0,
    delay_std=2
):
    source_neurons = flatten(source_neurons)
    target_neurons = flatten(target_neurons)
    netcons = []
    synapses = []

    for src in source_neurons:
        for tgt in target_neurons:
            syn = h.ExpSyn(tgt.soma(0.5))
            syn.e = e
            syn.tau = tau

            nc = h.NetCon(src.soma(0.5)._ref_v, syn, sec=src.soma)
            nc.threshold = threshold

            # Генерация веса и задержки из нормального распределения
            w = max(0.0, random.gauss(weight_mean, weight_std))
            d = max(0.1, random.gauss(delay_mean, delay_std))  # минимальная задержка 0.1 мс

            nc.weight[0] = w
            nc.delay = d

            synapses.append(syn)
            netcons.append(nc)

    return synapses, netcons


def connect_inh(source_neurons, target_neurons, e=-75, tau=3.0, threshold=0, weight=0.001, delay=2.0):

    source_neurons = flatten(source_neurons)
    target_neurons = flatten(target_neurons)
    netcons = []
    synapses = []

    for src in source_neurons:
        for tgt in target_neurons:
            syn = h.ExpSyn(tgt.soma(0.5))
            syn.e = e
            syn.tau = tau

            nc = h.NetCon(src.soma(0.5)._ref_v, syn, sec=src.soma)
            nc.threshold = threshold
            nc.weight[0] = weight
            nc.delay = delay

            synapses.append(syn)
            netcons.append(nc)

    return synapses, netcons

# возбуждающие и ингибирующие таламус
thalamus_E_TCR = [HHNeuron(inh=False) for _ in range(N_thalamus_E)]
thalamus_I_nRT = [HHNeuron(inh=True) for _ in range(N_thalamus_I)]

# Генератор спайков
syn_inputs = []
conns = []
netstims = []


for cell in thalamus_E_TCR:
    netstim = h.NetStim()
    netstim.start = 0      # время первого спайка
    netstim.number = 20      # количество спайков
    netstim.interval = 10   # интервал между спайками
    netstim.noise = 1
    syn = h.ExpSyn(cell.soma(0.5))
    syn.e = 0
    syn.tau = 2.0
    nc = h.NetCon(netstim, syn)
    nc.weight[0] = 0.01
    syn_inputs.append(syn)
    conns.append(nc)
    netstims.append(netstim)

# ингибирующие слой 2/3
L23_I_Axax23 = split_population([HHNeuron(inh=True) for _ in range(N_L23_I)], 3)
L23_I_Bask23 = split_population([HHNeuron(inh=True) for _ in range(N_L23_I)], 3)
L23_I_LTS23 = split_population([HHNeuron(inh=True) for _ in range(N_L23_I)], 3)

# возбуждающие слой 2/3
L23_E_SyppyrRS = split_population([HHNeuron() for _ in range(N_L23_E)], 2)
L23_E_SyppyrFRB = split_population([HHNeuron() for _ in range(N_L23_E)], 2)

# возбуждающие и ингибирующие слой 4
L4_E_Spinstel4 = split_population([HHNeuron() for _ in range(N_L4_E)], 1)
L4_I_LTS4 = split_population([HHNeuron(inh=True) for _ in range(N_L4_I)], 1)

# возбуждающие слой 5
L5_E_TuftRS5 = split_population([HHNeuron() for _ in range(N_L5_E)], 2)
L5_E_TuftIB5 = split_population([HHNeuron() for _ in range(N_L5_E)], 2)

# ингбирующие слой 5 и 6
L56_I_Bask56 = split_population([HHNeuron(inh=True) for _ in range(N_L5_I+N_L6_I)], 3)
L56_I_Axax56 = split_population([HHNeuron(inh=True) for _ in range(N_L5_I+N_L6_I)], 3)
L56_I_LTS56 = split_population([HHNeuron(inh=True) for _ in range(N_L5_I+N_L6_I)], 3)

# возбуждающие слой 6
L6_E_NontuftRS6 = split_population([HHNeuron() for _ in range(N_L6_E)], 1)

#synapses_TCR_to_nRT, netcons_TCR_to_nRT = connect_exc(thalamus_E_TCR, thalamus_I_nRT)
#synapses_TCR_to_L4, netcons_TCR_to_L4 = connect_exc(thalamus_E_TCR, L4_E_Spinstel4)

synapses_TCR_to_nRT, netcons_TCR_to_nRT = connect_exc(thalamus_E_TCR, thalamus_I_nRT)
synapses_TCR_to_L4, netcons_TCR_to_L4 = connect_exc_gauss(thalamus_E_TCR, L4_E_Spinstel4)

synapses_L4_to_L4, netcons_L4_to_L4 = connect_exc_gauss(L4_E_Spinstel4, L4_E_Spinstel4)
synapses_L4_to_L4_I_LTS4, netcons_L4_to_L4_I_LTS4 = connect_exc(L4_E_Spinstel4, L4_I_LTS4)
synapses_L4_to_L23_RS, netcons_L4_to_L23_RS = connect_exc(L4_E_Spinstel4, L23_E_SyppyrRS)
synapses_L4_to_L23_FRB, netcons_L4_to_L23_FRB = connect_exc(L4_E_Spinstel4, L23_E_SyppyrFRB)
synapses_L4_to_L23_LTS, netcons_L4_to_L23_LTS = connect_exc(L4_E_Spinstel4, L23_I_LTS23)
synapses_L4_to_L5_TuftRS, netcons_L4_to_L5_TuftRS = connect_exc(L4_E_Spinstel4, L5_E_TuftRS5)
synapses_L4_to_L5_TuftIB, netcons_L4_to_L5_TuftIB = connect_exc(L4_E_Spinstel4, L5_E_TuftIB5)

synapses_L23_RS_to_RS, netcons_L23_RS_to_RS = connect_exc(L23_E_SyppyrRS, L23_E_SyppyrRS)
synapses_L23_FRB_to_FRB, netcons_L23_FRB_to_FRB = connect_exc(L23_E_SyppyrFRB, L23_E_SyppyrFRB)
synapses_L23_RS_to_FRB, netcons_L23_RS_to_FRB = connect_exc(L23_E_SyppyrRS, L23_E_SyppyrFRB)
synapses_L23_FRB_to_RS, netcons_L23_FRB_to_RS = connect_exc(L23_E_SyppyrFRB, L23_E_SyppyrRS)

synapses_L23_RS_to_TuftRS5, netcons_L23_RS_to_TuftRS5 = connect_exc(L23_E_SyppyrRS, L5_E_TuftRS5)
synapses_L23_RS_to_TuftIB5, netcons_L23_RS_to_TuftIB5 = connect_exc(L23_E_SyppyrRS, L5_E_TuftIB5)
synapses_L23_RS_to_L6, netcons_L23_RS_to_L6 = connect_exc(L23_E_SyppyrRS, L6_E_NontuftRS6)
synapses_L23_FRB_to_TuftRS5, netcons_L23_FRB_to_TuftRS5 = connect_exc(L23_E_SyppyrFRB, L5_E_TuftRS5)
synapses_L23_FRB_to_TuftIB5, netcons_L23_FRB_to_TuftIB5 = connect_exc(L23_E_SyppyrFRB, L5_E_TuftIB5)
synapses_L23_FRB_to_L6, netcons_L23_FRB_to_L6 = connect_exc(L23_E_SyppyrFRB, L6_E_NontuftRS6)

synapses_L23_RS_to_LTS23, netcons_L23_RS_to_LTS23 = connect_exc(L23_E_SyppyrRS, L23_I_LTS23)
synapses_L23_RS_to_Bask23, netcons_L23_RS_to_Bask23 = connect_exc(L23_E_SyppyrRS, L23_I_Bask23)
synapses_L23_RS_to_LTS56, netcons_L23_RS_to_LTS56 = connect_exc(L23_E_SyppyrRS, L56_I_LTS56)
synapses_L23_RS_to_L4, netcons_L23_RS_to_L4 = connect_exc(L23_E_SyppyrRS, L4_E_Spinstel4)

synapses_L23_FRB_to_LTS23, netcons_L23_FRB_to_LTS23 = connect_exc(L23_E_SyppyrFRB, L23_I_LTS23)
synapses_L23_FRB_to_Bask23, netcons_L23_FRB_to_Bask23 = connect_exc(L23_E_SyppyrFRB, L23_I_Bask23)
synapses_L23_FRB_to_Axax23, netcons_L23_FRB_to_Axax23 = connect_exc(L23_E_SyppyrFRB, L23_I_Axax23)
synapses_L23_FRB_to_LTS56, netcons_L23_FRB_to_LTS56 = connect_exc(L23_E_SyppyrFRB, L56_I_LTS56)
synapses_L23_FRB_to_Bask56, netcons_L23_FRB_to_Bask56 = connect_exc(L23_E_SyppyrFRB, L56_I_Bask56)
synapses_L23_FRB_to_Axax56, netcons_L23_FRB_to_Axax56 = connect_exc(L23_E_SyppyrFRB, L56_I_Axax56)

synapses_TuftRS5_to_TuftRS5, netcons_TuftRS5_to_TuftRS5 = connect_exc(L5_E_TuftRS5, L5_E_TuftRS5)
synapses_TuftRS5_to_TuftIB5, netcons_TuftRS5_to_TuftIB5 = connect_exc(L5_E_TuftRS5, L5_E_TuftIB5)
synapses_TuftRS5_to_L6, netcons_TuftRS5_to_L6 = connect_exc(L5_E_TuftRS5, L6_E_NontuftRS6)
synapses_TuftRS5_to_LTS56, netcons_TuftRS5_to_LTS56 = connect_exc(L5_E_TuftRS5, L56_I_LTS56)
synapses_TuftRS5_to_Bask56, netcons_TuftRS5_to_Bask56 = connect_exc(L5_E_TuftRS5, L56_I_Bask56)

synapses_TuftIB5_to_TuftIB5, netcons_TuftIB5_to_TuftIB5 = connect_exc(L5_E_TuftIB5, L5_E_TuftIB5)
synapses_TuftIB5_to_TuftRS5, netcons_TuftIB5_to_TuftRS5 = connect_exc(L5_E_TuftIB5, L5_E_TuftRS5)
synapses_TuftIB5_to_L6, netcons_TuftIB5_to_L6 = connect_exc(L5_E_TuftIB5, L6_E_NontuftRS6)
synapses_TuftIB5_to_LTS56, netcons_TuftIB5_to_LTS56 = connect_exc(L5_E_TuftIB5, L56_I_LTS56)

synapses_L6_to_TuftRS5, netcons_L6_to_TuftRS5 = connect_exc(L6_E_NontuftRS6, L5_E_TuftRS5)
synapses_L6_to_TuftIB5, netcons_L6_to_TuftIB5 = connect_exc(L6_E_NontuftRS6, L5_E_TuftIB5)
#synapses_L6_to_TCR, netcons_L6_to_TCR = connect_exc(L6_E_NontuftRS6, thalamus_E_TCR)  # закомментировано

# L2/3: LTS и Basket
synapses_LTS23_to_LTS23, netcons_LTS23_to_LTS23 = connect_inh(L23_I_LTS23, L23_I_LTS23)
synapses_LTS23_to_RS, netcons_LTS23_to_RS = connect_inh(L23_I_LTS23, L23_E_SyppyrRS)
synapses_LTS23_to_FRB, netcons_LTS23_to_FRB = connect_inh(L23_I_LTS23, L23_E_SyppyrFRB)
synapses_LTS23_to_Bask23, netcons_LTS23_to_Bask23 = connect_inh(L23_I_LTS23, L23_I_Bask23)
synapses_LTS23_to_L5_TuftRS, netcons_LTS23_to_L5_TuftRS = connect_inh(L23_I_LTS23, L5_E_TuftRS5)
synapses_LTS23_to_L5_TuftIB, netcons_LTS23_to_L5_TuftIB = connect_inh(L23_I_LTS23, L5_E_TuftIB5)
synapses_LTS23_to_L6, netcons_LTS23_to_L6 = connect_inh(L23_I_LTS23, L6_E_NontuftRS6)

synapses_Bask23_to_LTS23, netcons_Bask23_to_LTS23 = connect_inh(L23_I_Bask23, L23_I_LTS23)
synapses_Bask23_to_RS, netcons_Bask23_to_RS = connect_inh(L23_I_Bask23, L23_E_SyppyrRS)
synapses_Bask23_to_FRB, netcons_Bask23_to_FRB = connect_inh(L23_I_Bask23, L23_E_SyppyrFRB)
synapses_Bask23_to_Bask23, netcons_Bask23_to_Bask23 = connect_inh(L23_I_Bask23, L23_I_Bask23)
synapses_Bask23_to_L5_TuftRS, netcons_Bask23_to_L5_TuftRS = connect_inh(L23_I_Bask23, L5_E_TuftRS5)
synapses_Bask23_to_L5_TuftIB, netcons_Bask23_to_L5_TuftIB = connect_inh(L23_I_Bask23, L5_E_TuftIB5)
synapses_Bask23_to_L6, netcons_Bask23_to_L6 = connect_inh(L23_I_Bask23, L6_E_NontuftRS6)

# L4: LTS
synapses_LTS4_to_L4, netcons_LTS4_to_L4 = connect_inh(L4_I_LTS4, L4_E_Spinstel4)

# L5/6: ингибиторы
synapses_LTS56_to_LTS56, netcons_LTS56_to_LTS56 = connect_inh(L56_I_LTS56, L56_I_LTS56)
synapses_LTS56_to_LTS23, netcons_LTS56_to_LTS23 = connect_inh(L56_I_LTS56, L23_I_LTS23)
synapses_LTS56_to_RS, netcons_LTS56_to_RS = connect_inh(L56_I_LTS56, L23_E_SyppyrRS)
synapses_LTS56_to_FRB, netcons_LTS56_to_FRB = connect_inh(L56_I_LTS56, L23_E_SyppyrFRB)
synapses_LTS56_to_L5_TuftRS, netcons_LTS56_to_L5_TuftRS = connect_inh(L56_I_LTS56, L5_E_TuftRS5)
synapses_LTS56_to_L5_TuftIB, netcons_LTS56_to_L5_TuftIB = connect_inh(L56_I_LTS56, L5_E_TuftIB5)
synapses_LTS56_to_L6, netcons_LTS56_to_L6 = connect_inh(L56_I_LTS56, L6_E_NontuftRS6)

synapses_Bask56_to_Bask56, netcons_Bask56_to_Bask56 = connect_inh(L56_I_Bask56, L56_I_Bask56)
synapses_Bask56_to_L5_TuftRS, netcons_Bask56_to_L5_TuftRS = connect_inh(L56_I_Bask56, L5_E_TuftRS5)
synapses_Bask56_to_L5_TuftIB, netcons_Bask56_to_L5_TuftIB = connect_inh(L56_I_Bask56, L5_E_TuftIB5)
synapses_Bask56_to_L6, netcons_Bask56_to_L6 = connect_inh(L56_I_Bask56, L6_E_NontuftRS6)

synapses_Axax56_to_TuftRS5, netcons_Axax56_to_TuftRS5 = connect_inh(L56_I_Axax56, L5_E_TuftRS5)

# Таламус: ингибиторы
synapses_nRT_to_nRT, netcons_nRT_to_nRT = connect_inh(thalamus_I_nRT, thalamus_I_nRT)
# synapses_nRT_to_TCR, netcons_nRT_to_TCR = connect_inh(thalamus_I_nRT, thalamus_E_TCR)  # закомментировано

h.tstop = 200
h.finitialize(-65)
h.continuerun(h.tstop)

import matplotlib.pyplot as plt

# Только возбуждающие группы
'''
excitatory_groups = {
    "TCR (таламус, возбужд.)": thalamus_E_TCR,
    "L2/3 SyppyrRS": flatten(L23_E_SyppyrRS),
    "L2/3 SyppyrFRB": flatten(L23_E_SyppyrFRB),
    "L4 Spinstel": flatten(L4_E_Spinstel4),
    "L5 TuftRS": flatten(L5_E_TuftRS5),
    "L5 TuftIB": flatten(L5_E_TuftIB5),
    "L6 NontuftRS": flatten(L6_E_NontuftRS6)
}
'''
excitatory_groups = {
    "TCR (таламус, возбужд.)": thalamus_E_TCR,
    "L4 Spinstel": flatten(L4_E_Spinstel4)
}

plt.figure(figsize=(12, 6))

for name, neurons in excitatory_groups.items():
    neuron = neurons[0]
    v = neuron.vvec.as_numpy()
    t = neuron.tvec.as_numpy()
    mask = t <= 100
    plt.plot(t[mask], v[mask], label=name)



plt.title("Мембранный потенциал (возбуждающие нейроны из разных слоёв)")
plt.xlabel("Время (мс)")
plt.ylabel("Потенциал (мВ)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Ингибирующие группы
inhibitory_groups = {
    "thalamus_I_nRT": thalamus_I_nRT,
    "L2/3 Basket": flatten(L23_I_Bask23),
    "L2/3 LTS": flatten(L23_I_LTS23),
    "L2/3 AxoAxonic": flatten(L23_I_Axax23),
    "L4 LTS": flatten(L4_I_LTS4),
    "L5/6 Basket": flatten(L56_I_Bask56),
    "L5/6 LTS": flatten(L56_I_LTS56),
    "L5/6 AxoAxonic": flatten(L56_I_Axax56),
}

plt.figure(figsize=(12, 6))

for name, neurons in inhibitory_groups.items():
    neuron = neurons[0]  # Выбираем первого нейрона в группе
    v = neuron.vvec.as_numpy()
    t = neuron.tvec.as_numpy()
    mask = t <= 150
    plt.plot(t[mask], v[mask], label=name)

plt.title("Мембранный потенциал (ингибирующие нейроны из разных слоёв)")
plt.xlabel("Время (мс)")
plt.ylabel("Потенциал (мВ)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(12, 6))
#neurons = flatten(L4_E_Spinstel4)[:10]
neurons = flatten(L6_E_NontuftRS6)[:]

for i, neuron in enumerate(neurons):
    v = np.array(neuron.vvec)
    t = np.array(neuron.tvec)
    mask = t <= 100  # ограничим по времени

    plt.plot(t[mask], v[mask], label=f"Neuron {i}", alpha=0.6)

plt.title("Мембранные потенциалы нейронов слоя L4")
plt.xlabel("Время (мс)")
plt.ylabel("Потенциал (мВ)")
plt.grid(True)
# plt.legend()  # можно включить, но будет много подписей
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

t_start = 0     # начальное время
t_end = 200    # конечное время

import numpy as np

def extract_spike_times(neuron, threshold=0, refractory_period=2.0):
    v = np.array(neuron.vvec)
    t = np.array(neuron.tvec)

    spike_times = []
    last_spike_time = -np.inf

    for i in range(1, len(v)):
        if v[i-1] < threshold and v[i] >= threshold:
            if (t[i] - last_spike_time) >= refractory_period:
                spike_times.append(t[i])
                last_spike_time = t[i]

    return np.array(spike_times)

neurons = [flatten(L4_E_Spinstel4)[i] for i in range(20)]

for i, neuron in enumerate(neurons):
    spike_times = extract_spike_times(neuron, threshold=10, refractory_period=3.0)
    print(f"Нейрон {i}: {len(spike_times)} спайков → {np.round(spike_times).astype(int)} мс")

# Параметры временной оси
t_start = 0
t_end = 200
bin_size = 1  # ширина окна (мс)
bins = np.arange(t_start, t_end + bin_size, bin_size)

# Расплющиваем группу, если она разбита на подгруппы
L4_group = flatten(L4_E_Spinstel4)
#L4_group = flatten(L23_E_SyppyrRS)

spike_activity = np.zeros(len(bins) - 1)

for neuron in L4_group:
    spike_times = extract_spike_times(neuron, threshold=0, refractory_period=2.0)
    spike_bins = np.digitize(spike_times, bins) - 1
    unique_bins = np.unique(spike_bins[(spike_bins >= 0) & (spike_bins < len(spike_activity))])
    spike_activity[unique_bins] += 1

# --- Построение гистограммы ---
plt.figure(figsize=(12, 5))
plt.bar(bins[:-1], spike_activity, width=bin_size, align='edge', color='skyblue', edgecolor='black')
plt.xlabel("Время (мс)")
plt.ylabel("Число нейронов со спайком")
plt.title("Гистограмма спайковой активности нейронов L4_E_Spinstel4 (extract_spike_times)")
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

import numpy as np

excitatory_groups = {
    "TCR (таламус, возбужд.)": thalamus_E_TCR,
    "L2/3 SyppyrRS": flatten(L23_E_SyppyrRS),
    "L2/3 SyppyrFRB": flatten(L23_E_SyppyrFRB),
    "L4 Spinstel": flatten(L4_E_Spinstel4),
    "L5 TuftRS": flatten(L5_E_TuftRS5),
    "L5 TuftIB": flatten(L5_E_TuftIB5),
    "L6 NontuftRS": flatten(L6_E_NontuftRS6)
}


def build_spike_histogram(spike_matrix, t_start=0, t_stop=100, bin_size=5):
    bins = np.arange(t_start, t_stop + bin_size, bin_size)
    hist_matrix = []

    for group_name, spike_lists in spike_matrix.items():
        all_spikes = np.concatenate(spike_lists)
        counts, _ = np.histogram(all_spikes, bins=bins)
        hist_matrix.append(counts)

    return np.array(hist_matrix), bins
import matplotlib.pyplot as plt

def plot_spike_heatmap(hist_matrix, bins, group_names):
    plt.figure(figsize=(12, 6))
    im = plt.imshow(hist_matrix, aspect='auto', cmap='viridis', origin='lower')

    plt.colorbar(im, label="Количество спайков")
    plt.xlabel("Время (мс)")
    plt.ylabel("Группы нейронов")
    plt.title("Тепловая карта активности нейронных групп")

    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    plt.xticks(ticks=np.arange(len(bin_centers)), labels=np.round(bin_centers).astype(int), rotation=45)
    plt.yticks(ticks=np.arange(len(group_names)), labels=group_names)

    plt.tight_layout()
    plt.show()


# Шаг 1: собрать spike_matrix (как раньше)
spike_matrix = {}
for group_name, neurons in excitatory_groups.items():
    group_spikes = [extract_spike_times(neuron) for neuron in neurons]
    spike_matrix[group_name] = group_spikes

# Шаг 2: построить гистограмму
hist_matrix, bins = build_spike_histogram(spike_matrix, t_start=0, t_stop=h.tstop, bin_size=5)

# Шаг 3: отрисовать тепловую карту
plot_spike_heatmap(hist_matrix, bins, list(spike_matrix.keys()))